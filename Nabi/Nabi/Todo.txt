Goals:
- Nabi should be: Fast, flexible, data driven, testable
- For an MVP we need: Reflection, rendering, input, collision, audio, networking(?), core

Current:

// --- Critical Priority ---

// --- High Priority ---

- 'reflect' spelt wrong with 'reflect system property' macro - rename!
- see like the playground proj can have a 'common' hlsl file with buffers etc.

//m_Context.m_Registry.emplace<DirectionalLightComponent>(m_Context.m_Registry.create());
		
		//m_Context.m_Registry.emplace<ecs::DirectionalLightComponent>(m_Context.m_Registry.create());
		// CURRENT TODO - work out why this listeners arent being called
		// Also, the update event needs to be for either the *light or transform* component was changed
		// ^^ ASKED THIS IN QUESTION 

		// stuff in TestDraw

- need a camera system
- the stuff in nabi core setting up the camera should go in there
- TODO lighting, screen res, moving the model eg pos.x = 500? reszing the screen

- Reflect XMFloat3 and all of the other dx types (need to define there from string func and perhaps a new macro/string conventer change)

- Fix all warnings / disable those we dont care about
- Forward declare the enums (PixelShader, VertexShader) or switch to enum class

- Comment up all rendering code
- Write rendering tests
- Get sam to review rendering code and see any improvements

- Make sure to include some good logging when the direct x render stuff is starting up / running

- Core should be pch
- Sort out pch. - core in pch. testcore as well?
- Wincore above Enginecore?

Structure Stuff

- namespace ecs::SingletonComponents ?
- Create systems on the heap (with a shared ptr i think) and adjust the initsystems test accordingly. might also have to create them differently in the first place?
  (acc i think this is ok on the stack?)

// --- Low Priority ---

- Have all entity groups / event calls etc as constexpr in a file

- Inline string converter From[Type] functions?

- It might be possible to make Singleton's use a static constructor to init themselves as well? But when I did a quick attempt I got a lot of scary linker errors
  and I don't want to go down that road right now!

- idea: could have like CoreRenderer, CorePhysics system etc - no virtual inheritance but can be overriden? idk how that would work thou

- see email for input stuff

- Find and fix that incomplete type not allowed (can we do a seperate thing to what we did in google test in entt.h?)
  (ngl i don't think this is possible.. and might well just be visual studio doing visual studio things. if i have an idea i'll do it, but for now i'm 
   decreasing its priority)

// --- Nice to have stuff / random ideas ---

- Log to file functionality for Logger
- Work out how to have the REFLECTION_END macro's not have to take in the type again

Archive: 
- Add new 'CoreSingletonComponents' folder/filter for graphics/io components. delete the cpp's of these components and the src folder/filter if not needed
- Add the catagory infront of all logging statements. Eg [Rendering] msg or [Reflection] msg - should this be a macro?
- Learn rendering! (im still torn between directx and opengl.. once get an answer from uni hopefully things will become clearer)
- Direct X namespace as dx?
- Entity creator could also live in context? and not be a singleton
- For the model, it doesnt need to contain all of the vectors. Just the index/vertex buffer and the triangle count.
- This triangle count can either in the index buffer or the model (because of how I've done it, it might be easist to have it in the model)
- Use ConstantBufferLoader::AssignShaderConstnantBuffers to add the constant buffers to the vertex shader
- call assert inside the dx exception 
- Fix release mode (nvm that doesnt work..)
- Make project structure more flat
- Core should include standard libs like vec, array, map etc so dont have to include them everywhere
- Check through code where done this and fix accordingly
- And g_ for global vars - eg that inline xml parser one
  #define DELETE_COPY_MOVE_CONSTRUCTORS(Type)     Type(Type&) = delete; \ (this has been created in TypeUtils and included in EngineCore. just need to use it!)
                                                Type(Type&&) = delete; \
                                                Type(const Type&) = delete; \
                                                Type(const Type&&) = delete;
^ For singleton? and anything else 
- If one day we want to NOEXCEPT stuff, include engine core everywhere in engine first thing and do this.
- Split up header files from src files (is this something we actually want to do?)
- Having core in .h and .cpp files is a good idea
- i am actually liking the idea of splitting up the headers and cpp more and more. can acc use engine core and define more functions in cpp
  where it makes sense (eg the string converter stuff) without it upsetting my ocd xD do this i think
- AND move to a .h and .cpp approach
- Rename 'Templates' -> 'Patterns' (https://github.com/dbeef/spelunky-psp/tree/master/src/patterns/interface/patterns)
- name 'rhs' to 'other' in == overrides and stuff
- Have an engine core with defines and NABI_NOEXCEPT in it? Core can become GameCore? (made Engine Utils with NOEXCEPT in it)
- Make functions longer than line 1 line in header files static not inline (eg - the string converter one)
- Can the reflection macro stuff (ie begin, middle, end) go in the cpp not h? if so, dont need the create reflector instance macro and will not pollute the namespace (this does work - should do but need some reflection macro work)
- actually test the math random number generation xd (if it doesnt work, just use normal random - it no longer needs to be the fastest it can be)
- Fix linker error (ask Brandon for help) (it appears when you comment out the use debug utils define in debug mode only) [seems to have magically disappeared???]
- Should c_DefaultEntityGroup go in a different place?
- Gotta sort out the logging, UUID stuff [DONE], and an assert if a entityproperty list is referecning a component/property which doesnt exist [DONE]?
- Once all that is done, clean up code / move comments over / refactor xml parser  - make sure everything is to a good standard
- Can make a function of ResolveEntityComponents i think
- refactor entity info? think [just left a comment - i think the struct is still valid and its a bit of history xd]
- make the comaprison not have a method so test errors appear on the time in the test file they are on
- Dont just sit there stuck. you've already got this working in the xmlparser. carefully review that code with a fresh pair of eyes
  and work out where you're going wrong
- Current problems with the Runtime entity creation stuff
- Custom Components dont seem to be creating properly
- The first is just mangled, and the next look like they are default constructing
- SO close thou dude. DO NOT give up! 
- Remember the goal: Be ready for rendering by the time you go back to leam
- Handle runtime entity creation
- Create anonymous id for entities which don't have names? is this needed? is this entt functionality already which hashed string?
- Debug tag for entities DONE / components / systems DONE / properties in xml (i think this should go in parsesystems, parseentities, createecscomponent, createproperty)
  BUT doesn't actually do what its meant to in debug?? getting a bit tired, so will do this tmoz
- Seperate tests define? and seperate assert define. this will acc be useful and probs a pain to do later so come on!
- Singleton static constructor / fix circular dependency with singleton and debugutils (worst come to worse have like a call assert func with implementation in singleton.cpp)
  Get rid of that big comment in Singleton.h
- could we fix the warning that void(0) log produces in release builds by doing the pragma error thing in release only? (we did in google test)
- Create the assert logic (just do like entt assert? looks pretty simple - just use c++ assert!) [acc wasn't so simple but we've got it done!]
- Some static asserts to make sure log level and the macro match up (see logger todos - comeon dude nearly done with all these todos!!) [no longer needed]
- DOING THIS WILL RESOLVE BELOW: Fix the failing test with mock component!
  I think something link /* .func<&nabi::Reflection::StringConverter::FromString<int>>(nabi::Reflection::ReflectionGlobals::c_FromStringFunctionName) \ */
  In the reflect end will work. This is the problem, no from string defined but enums are ints so should be able to use..???
- https://github.com/skypjack/entt/wiki/Crash-Course:-runtime-reflection-system#named-constants-and-enums
- Write enum tests in reflection (gotta test stand alone and in mock component)
- Check over all changes up to this point and commit. make sure you haven't done anything else dumb... i would do it now but i gotta go pack!
- Remember to update the comment in ReflectionMacros -> enums
- Current WIP: Reflecting enums (wip stuff in ReflectionMacros and StringConverter). Prototype this fully in the test proj first I recon
  Once this is done can fix the todo in Logger.h / tidy up Logger.  (I was being so dumb logger was well easy. and so was enums!!!! ah well, you live and learn)
- Have file lines all line up by inserting some spaces
- Fix circular dependency between Singleton and DebugUtils DONE
- Does DebugUtils need to include IO stream? or can it go in logger cpp? (remember to update core comment) DONE
- Can I std::move systems rather than copying them? try this, and if so try deleting the copy operators again DONE
- with this namespace stuff, remember to to it everywhere. eg with mocksystem etc as well. should we just go lowercase? its not that bad | DOne I dont acc like this
- All final for classes !!! DONE
- Fix google test warnings (or suppress) DONE
- Remove delete rule of 6 stuff from EntityInfoComponent? Will components use this (only if systems do)? If so - put it in the base? DONE
- Need to decide on namespace structure. See mocksystem, mockcomponent
- PERHAPS the component and stuff could just live inside ECS, but anything free eg the create function could have another namespace lv
- Rule of 'if its a class, dont bascially dupe it like ComponentA::ComponentA should stay i recon' DONE
- With singletons, if dont data drive them need the static constructor stuff. if do data drive, then dont. 
  tbh i dont think i need to data drive them, it doesnt make much sense. shouldnt have many singletons anyway. consider the static constructor DONE
- Put Comparison in its own header DONE
- If the MetaObjectLookup map is complaining with entthashedstring, just make the key a u64 or whatever hashed string is under the hood
   ^ ngl i dont think we need to do this as std::hash it already going to be called DONE ****
- Make ConstructSettingsFromComponent functions not inline and have  def in cpp ty brandon DONE
- Also have to solve this ConstructComponentSettings thing.. its real dumb . i think i have just solved.. dont delte the copy constrctor..?? DONE

Info:
All the 'todos' of the project! This isn't all the todos ever, its just since I started tracking them in one place (18/12/2022)
This isn't the best way of tracking stuff I know, but trust me its better than what it was :D
Besides, I like just being able to open up the proj and everything is right there

Credits:
Brandon, Matt, Jake, Sam

To Read:
- https://dzone.com/articles/performance-of-stdstring-view-vs-stdstring-from-c1
- Small string optimisation
- https://taylorconor.com/blog/enum-reflection/
- https://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom
- https://stackoverflow.com/questions/26152096/when-and-why-would-you-use-static-with-constexpr
- https://learn.microsoft.com/en-us/cpp/cpp/property-cpp?view=msvc-170

Remember:
- Can't use ifdef inside __pragma

idk why this is here really but as i say, i like everything in one place :D
